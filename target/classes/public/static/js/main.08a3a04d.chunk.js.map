{"version":3,"sources":["logo.svg","Issues.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Issues","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","issues","_this2","dateOneWeekAgo","Date","setDate","getDate","dateAsISOString","toISOString","fetch","encodeURI","then","results","json","data","console","log","i","length","dataItem","assignee","push","react_default","a","createElement","className","key","title","login","user","body","setState","Component","App","src_Issues","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCuGzBC,qBAlGb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,OAAQ,IAHER,mFAOM,IAAAS,EAAAN,KAEdO,EAAiB,IAAIC,KACzBD,EAAeE,QAAQF,EAAeG,UAAY,GAClD,IAAIC,EAAkBJ,EAAeK,cAErCC,MAAM,6DAA+DC,UAAUH,IAC5EI,KAAK,SAAAC,GACJ,OAAOA,EAAQC,SACdF,KAAM,SAAAG,GACPC,QAAQC,IAAIF,GAEZ,IADA,IAAIb,EAAS,GACJgB,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAAK,CACpC,IAAIE,EAAWL,EAAKG,GACK,MAArBE,EAASC,SACXnB,EAAOoB,KACLC,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUC,IAAKT,GAC3BK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACXN,EAASQ,OAEZL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACXN,EAASC,SAASQ,OAErBN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXN,EAASU,KAAKD,QAGnBN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXN,EAASW,SAMlB7B,EAAOoB,KAELC,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUC,IAAKT,GAC3BK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACXN,EAASQ,OAEZL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXN,EAASU,KAAKD,QAInBN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXN,EAASW,SAQpBf,QAAQC,IAAIf,GACZC,EAAK6B,SAAS,CAAC9B,OAAQA,uCAK3B,OACEqB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,wGAMAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,4BAID5B,KAAKI,MAAMC,gBA7FD+B,cCcNC,gMAVX,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAD,cAJUF,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.08a3a04d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './issues.css';\n\nclass Issues extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      issues: []\n    };\n  }\n\n  componentDidMount() {\n    //get time exactly 1 week before now\n    var dateOneWeekAgo = new Date();\n    dateOneWeekAgo.setDate(dateOneWeekAgo.getDate() - 7);\n    var dateAsISOString = dateOneWeekAgo.toISOString();\n\n    fetch(\"https://api.github.com/repos/angular/angular/issues?since=\" + encodeURI(dateAsISOString))\n      .then(results => {\n        return results.json();\n      }).then( data => {\n        console.log(data)\n        var issues = []\n        for (var i = 0; i < data.length; i++) {\n          var dataItem = data[i]\n          if (dataItem.assignee != null) {\n            issues.push(\n              <tbody>\n              <tr className=\"dataRow\" key={i}>\n                <td className=\"title\">\n                  {dataItem.title}\n                </td>\n                <td className=\"asigneeLogin\">\n                  {dataItem.assignee.login}\n                </td>\n                <td className=\"userLogin\">\n                  {dataItem.user.login}\n                </td>\n              </tr>\n              <tr className=\"bodyRow\">\n                  <td className=\"body\">\n                    {dataItem.body}\n                  </td>\n              </tr>\n              </tbody>\n            )\n          } else {\n            issues.push(\n\n              <tbody>\n              <tr className=\"dataRow\" key={i}>\n                <td className=\"title\">\n                  {dataItem.title}\n                </td>\n                <td className=\"asigneeLogin\">\n                  <div className=\"emptyDiv\"/>\n                </td>\n                <td className=\"userLogin\">\n                  {dataItem.user.login}\n                </td>\n              </tr>\n\n              <tr className=\"bodyRow\">\n                <td className=\"body\">\n                  {dataItem.body}\n                </td>\n              </tr>\n              </tbody>\n            )\n          }\n        }\n\n        console.log(issues)\n        this.setState({issues: issues})\n      });\n  }\n\n  render() {\n    return (\n      <div>\n      <div>\n        Below is a table containing a title, assignee login, user login, and\n        body for each issue.\n      </div>\n\n\n      <table className=\"issuesTable\">\n        <tbody>\n          <tr>\n            <td> Title </td>\n            <td> Assignee Login </td>\n            <td> User Login </td>\n          </tr>\n        </tbody>\n\n          {this.state.issues}\n      </table>\n      </div>\n    )\n  }\n}\n\nexport default Issues;\n","import React, { Component } from 'react';\nimport Issues from './Issues.js';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Issues/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}